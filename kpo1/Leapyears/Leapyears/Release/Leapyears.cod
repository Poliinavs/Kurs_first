; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	c:\instit\lab\êïî\leapyears\leapyears\release\leapyears.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_07PEAPJBGG@Russian@			; `string'
PUBLIC	??_C@_0BB@BCFBHNM@?5?B?b?e?d?h?r?e?5?d?$OA?r?s?3?5?5@ ; `string'
PUBLIC	??_C@_0BK@MDIOBJCF@?6?M?e?j?n?p?p?e?j?r?m?n?5?b?b?e?d?e?m?$OA?5?d?$OA?r?$OA@ ; `string'
PUBLIC	??_C@_07CLDOPFAM@?B?b?e?d?h?r?e@		; `string'
PUBLIC	??_C@_0DI@JBEJIHMI@1?9?n?o?p?e?d?e?k?h?r?$PM?0?5?$PP?b?k?$PP?e?r?q?$PP?5?k?h?5?b?b?e?d?e@ ; `string'
PUBLIC	??_C@_0DI@IINHBCLJ@2?9?b?$PL?w?h?q?k?h?r?$PM?5?o?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?b?b@ ; `string'
PUBLIC	??_C@_0EE@GLEFEPOP@3?9?b?$PL?w?h?q?k?h?r?$PM?5?q?j?n?k?$PM?j?n?5?d?m?e?i?5?n?q?r?$OA?k?n@ ; `string'
PUBLIC	??_C@_07HJIONDFP@4?9?b?$PL?u?n?d@		; `string'
PUBLIC	??_C@_0BE@GDJPIMPF@?5?o?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?3?5@ ; `string'
PUBLIC	??_C@_0CE@ENCNGIEO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?h?5?l?e?q?$PP?v?5?d?m?$PP?5?p?n?f?d?e?m@ ; `string'
PUBLIC	??_C@_0BL@KMDPNDAB@?D?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA?k?n?q?$PM?3?5@ ; `string'
PUBLIC	??_C@_0BE@LKGFEEBC@?5?M?e?5?b?h?q?n?j?n?q?m?$PL?i?5?c?n?d?5@ ; `string'
PUBLIC	??_C@_0BA@DHADGGDH@?B?h?q?n?j?n?q?m?$PL?i?5?c?n?d?5@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	?mes@@3PAHA					; mes
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
EXTRN	__imp_?rdstate@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp___invalid_parameter_noinfo_noreturn:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp____std_terminate:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__imp____std_exception_copy:PROC
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp__setlocale:PROC
EXTRN	__imp____std_exception_destroy:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__imp____CxxFrameHandler3:PROC
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
?mes@@3PAHA DD	01fH					; mes
	DD	01cH
	DD	01fH
	DD	01eH
	DD	01fH
	DD	01eH
	DD	01fH
	DD	01fH
	DD	01eH
	DD	01fH
	DD	01fH
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@DHADGGDH@?B?h?q?n?j?n?q?m?$PL?i?5?c?n?d?5@
CONST	SEGMENT
??_C@_0BA@DHADGGDH@?B?h?q?n?j?n?q?m?$PL?i?5?c?n?d?5@ DB 0c2H, 0e8H, 0f1H, 0eeH
	DB	0eaH, 0eeH, 0f1H, 0edH, 0fbH, 0e9H, ' ', 0e3H, 0eeH, 0e4H, ' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LKGFEEBC@?5?M?e?5?b?h?q?n?j?n?q?m?$PL?i?5?c?n?d?5@
CONST	SEGMENT
??_C@_0BE@LKGFEEBC@?5?M?e?5?b?h?q?n?j?n?q?m?$PL?i?5?c?n?d?5@ DB ' ', 0cdH
	DB	0e5H, ' ', 0e2H, 0e8H, 0f1H, 0eeH, 0eaH, 0eeH, 0f1H, 0edH, 0fbH
	DB	0e9H, ' ', 0e3H, 0eeH, 0e4H, ' ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KMDPNDAB@?D?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA?k?n?q?$PM?3?5@
CONST	SEGMENT
??_C@_0BL@KMDPNDAB@?D?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA?k?n?q?$PM?3?5@ DB 0c4H
	DB	0eeH, ' ', 0e4H, 0edH, 0ffH, ' ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H
	DB	0edH, 0e8H, 0ffH, ' ', 0eeH, 0f1H, 0f2H, 0e0H, 0ebH, 0eeH, 0f1H
	DB	0fcH, ': ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ENCNGIEO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?h?5?l?e?q?$PP?v?5?d?m?$PP?5?p?n?f?d?e?m@
CONST	SEGMENT
??_C@_0CE@ENCNGIEO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?h?5?l?e?q?$PP?v?5?d?m?$PP?5?p?n?f?d?e?m@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H
	DB	' ', 0e8H, ' ', 0ecH, 0e5H, 0f1H, 0ffH, 0f6H, ' ', 0e4H, 0edH, 0ffH
	DB	' ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H, 0edH, 0e8H, 0ffH, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GDJPIMPF@?5?o?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?3?5@
CONST	SEGMENT
??_C@_0BE@GDJPIMPF@?5?o?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?3?5@ DB ' ', 0efH
	DB	0eeH, 0f0H, 0ffH, 0e4H, 0eaH, 0eeH, 0e2H, 0fbH, 0e9H, ' ', 0edH
	DB	0eeH, 0ecH, 0e5H, 0f0H, ': ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HJIONDFP@4?9?b?$PL?u?n?d@
CONST	SEGMENT
??_C@_07HJIONDFP@4?9?b?$PL?u?n?d@ DB '4-', 0e2H, 0fbH, 0f5H, 0eeH, 0e4H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@GLEFEPOP@3?9?b?$PL?w?h?q?k?h?r?$PM?5?q?j?n?k?$PM?j?n?5?d?m?e?i?5?n?q?r?$OA?k?n@
CONST	SEGMENT
??_C@_0EE@GLEFEPOP@3?9?b?$PL?w?h?q?k?h?r?$PM?5?q?j?n?k?$PM?j?n?5?d?m?e?i?5?n?q?r?$OA?k?n@ DB '3'
	DB	'-', 0e2H, 0fbH, 0f7H, 0e8H, 0f1H, 0ebH, 0e8H, 0f2H, 0fcH, ' ', 0f1H
	DB	0eaH, 0eeH, 0ebH, 0fcH, 0eaH, 0eeH, ' ', 0e4H, 0edH, 0e5H, 0e9H
	DB	' ', 0eeH, 0f1H, 0f2H, 0e0H, 0ebH, 0eeH, 0f1H, 0fcH, ' ', 0e4H
	DB	0eeH, ' ', 0e1H, 0ebH, 0e8H, 0e6H, 0e0H, 0e9H, 0f8H, 0e5H, 0e3H
	DB	0eeH, ' ', 0e4H, 0edH, 0ffH, ' ', 0e2H, 0e0H, 0f8H, 0e5H, 0e3H
	DB	'o ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H, 0edH, 0e8H, 0ffH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@IINHBCLJ@2?9?b?$PL?w?h?q?k?h?r?$PM?5?o?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?b?b@
CONST	SEGMENT
??_C@_0DI@IINHBCLJ@2?9?b?$PL?w?h?q?k?h?r?$PM?5?o?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?b?b@ DB '2'
	DB	'-', 0e2H, 0fbH, 0f7H, 0e8H, 0f1H, 0ebH, 0e8H, 0f2H, 0fcH, ' ', 0efH
	DB	0eeH, 0f0H, 0ffH, 0e4H, 0eaH, 0eeH, 0e2H, 0fbH, 0e9H, ' ', 0edH
	DB	0eeH, 0ecH, 0e5H, 0f0H, ' ', 0e2H, 0e2H, 0e5H, 0e4H, 0e5H, 0edH
	DB	0edH, 0eeH, 0e3H, 0eeH, ' ', 0e4H, 0edH, 0ffH, ' ', 0e2H, ' ', 0e3H
	DB	0eeH, 0e4H, 0f3H, ' ', 0c3H, 0c3H, 0c3H, 0c3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@JBEJIHMI@1?9?n?o?p?e?d?e?k?h?r?$PM?0?5?$PP?b?k?$PP?e?r?q?$PP?5?k?h?5?b?b?e?d?e@
CONST	SEGMENT
??_C@_0DI@JBEJIHMI@1?9?n?o?p?e?d?e?k?h?r?$PM?0?5?$PP?b?k?$PP?e?r?q?$PP?5?k?h?5?b?b?e?d?e@ DB '1'
	DB	'-', 0eeH, 0efH, 0f0H, 0e5H, 0e4H, 0e5H, 0ebH, 0e8H, 0f2H, 0fcH
	DB	', ', 0ffH, 0e2H, 0ebH, 0ffH, 0e5H, 0f2H, 0f1H, 0ffH, ' ', 0ebH
	DB	0e8H, ' ', 0e2H, 0e2H, 0e5H, 0e4H, 0e5H, 0edH, 0edH, 0fbH, 0e9H
	DB	' ', 0e3H, 0eeH, 0e4H, ' ', 0c3H, 0c3H, 0c3H, 0c3H, ' ', 0e2H, 0e8H
	DB	0f1H, 0eeH, 0eaH, 0eeH, 0f1H, 0edH, 0fbH, 0ecH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CLDOPFAM@?B?b?e?d?h?r?e@
CONST	SEGMENT
??_C@_07CLDOPFAM@?B?b?e?d?h?r?e@ DB 0c2H, 0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MDIOBJCF@?6?M?e?j?n?p?p?e?j?r?m?n?5?b?b?e?d?e?m?$OA?5?d?$OA?r?$OA@
CONST	SEGMENT
??_C@_0BK@MDIOBJCF@?6?M?e?j?n?p?p?e?j?r?m?n?5?b?b?e?d?e?m?$OA?5?d?$OA?r?$OA@ DB 0aH
	DB	0cdH, 0e5H, 0eaH, 0eeH, 0f0H, 0f0H, 0e5H, 0eaH, 0f2H, 0edH, 0eeH
	DB	' ', 0e2H, 0e2H, 0e5H, 0e4H, 0e5H, 0edH, 0e0H, ' ', 0e4H, 0e0H
	DB	0f2H, 0e0H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BCFBHNM@?5?B?b?e?d?h?r?e?5?d?$OA?r?s?3?5?5@
CONST	SEGMENT
??_C@_0BB@BCFBHNM@?5?B?b?e?d?h?r?e?5?d?$OA?r?s?3?5?5@ DB ' ', 0c2H, 0e2H, 0e5H
	DB	0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H, ':  ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PEAPJBGG@Russian@
CONST	SEGMENT
??_C@_07PEAPJBGG@Russian@ DB 'Russian', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z	; std::_Voidify_iter<char * *>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Get_size_of_n@$00@std@@YAII@Z		; std::_Get_size_of_n<1>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z	; std::_Char_traits<char,int>::move
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??$max@I@std@@YAABIABI0@Z			; std::max<unsigned int>
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z	; std::_Char_traits<char,int>::copy
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?visok_god@@YAXH@Z				; visok_god
PUBLIC	?count@@YAHHHQAH@Z				; count
PUBLIC	?prov@@YAHHHH@Z					; prov
PUBLIC	_main
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___std_terminate:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	___security_cookie:DWORD
CRT$XCU	SEGMENT
?vis$initializer$@@3P6AXXZA DD FLAT:??__Evis@@YAXXZ	; vis$initializer$
?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 014H DUP (?)
	DD	0fH					; vis
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	04H
	DD	FLAT:___std_terminate
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$6
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$2
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	04H
	DD	FLAT:___std_terminate
__tryblocktable$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$6
__catchsym$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$0
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; __Size$dead$ = ecx
; __Where$ = edx

; 168  :         (void)_Size;
; 169  :         return _Where;

  00000	8b c2		 mov	 eax, edx

; 170  :     }

  00002	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   :         _Data._What = _Message;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0000f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
  00014	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 68   :     }

  00017	8b c1		 mov	 eax, ecx
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_copy
  00024	83 c4 08	 add	 esp, 8

; 74   :     }

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00010	59		 pop	 ecx

; 91   :     }

  00011	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00016	83 c4 04	 add	 esp, 4
  00019	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001d	74 0b		 je	 SHORT $LN6@scalar
  0001f	6a 0c		 push	 12			; 0000000cH
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN6@scalar:
  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 130  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   :         _Data._What = _Message;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 65   :         : _Data()

  00009	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 131  :     }

  00011	8b c1		 mov	 eax, ecx
  00013	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00016	83 c4 04	 add	 esp, 4
  00019	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001d	74 0b		 je	 SHORT $LN9@scalar
  0001f	6a 0c		 push	 12			; 0000000cH
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN9@scalar:
  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00010	59		 pop	 ecx
  00011	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00016	83 c4 04	 add	 esp, 4
  00019	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001d	74 0b		 je	 SHORT $LN12@scalar
  0001f	6a 0c		 push	 12			; 0000000cH
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN12@scalar:
  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00010	59		 pop	 ecx
  00011	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_copy
  00024	83 c4 08	 add	 esp, 8
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_copy
  00024	83 c4 08	 add	 esp, 8
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 557  :         return INT_MAX;

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 558  :     }

  00005	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT
; __Bytes$ = ecx

; 85   :         return ::operator new(_Bytes);

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00006	83 c4 04	 add	 esp, 4

; 86   :     }

  00009	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT
; __Ptr$ = ecx
; __Bytes$ = edx

; 154  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 155  :     _Bytes += _Non_user_size;

  00000	83 02 23	 add	 DWORD PTR [edx], 35	; 00000023H

; 156  : 
; 157  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);
; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00008	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0000a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0000d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00010	77 03		 ja	 SHORT $LN7@Adjust_man

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00012	89 11		 mov	 DWORD PTR [ecx], edx

; 174  : }

  00014	c3		 ret	 0
$LN7@Adjust_man:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT
; __Len$ = ecx

; 979  :     // convert size_t to size_t, unchanged
; 980  :     return _Len;

  00000	8b c1		 mov	 eax, ecx

; 981  : }

  00002	c3		 ret	 0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 1037 :     _CONSTEXPR20_CONTAINER void _Orphan_all() noexcept {}

  00000	c2 00 00	 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z PROC ; std::_Container_base0::_Alloc_proxy, COMDAT
; _this$dead$ = ecx

; 1039 :     _CONSTEXPR20_CONTAINER void _Alloc_proxy(const _Fake_allocator&) noexcept {}

  00000	c2 04 00	 ret	 4
?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z ENDP ; std::_Container_base0::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2374 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlen_strin:
  0000b	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\instit\lab\ÊÏÎ\Leapyears\Leapyears\Leapyears.cpp
;	COMDAT ??__Evis@@YAXXZ
text$di	SEGMENT
??__Evis@@YAXXZ PROC					; `dynamic initializer for 'vis'', COMDAT

; 4    : string vis;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fvis@@YAXXZ	; `dynamic atexit destructor for 'vis''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Evis@@YAXXZ ENDP					; `dynamic initializer for 'vis''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??__Fvis@@YAXXZ
text$yd	SEGMENT
??__Fvis@@YAXXZ PROC					; `dynamic atexit destructor for 'vis'', COMDAT
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00000	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 2a		 jb	 SHORT $LN15@dynamic
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00010	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN25@dynamic

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 28		 ja	 SHORT $LN22@dynamic

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN25@dynamic:

; 264  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
$LN15@dynamic:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00035	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0003f	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00049	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00050	c3		 ret	 0
$LN22@dynamic:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00051	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
??__Fvis@@YAXXZ ENDP					; `dynamic atexit destructor for 'vis''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\instit\lab\ÊÏÎ\Leapyears\Leapyears\Leapyears.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\instit\lab\ÊÏÎ\Leapyears\Leapyears\Leapyears.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\instit\lab\ÊÏÎ\Leapyears\Leapyears\Leapyears.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\instit\lab\ÊÏÎ\Leapyears\Leapyears\Leapyears.cpp
;	COMDAT _main
_TEXT	SEGMENT
_month$1$ = -24						; size = 4
_day$1$ = -20						; size = 4
_c$ = -16						; size = 4
_data$ = -12						; size = 4
_data1$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 18	 mov	 DWORD PTR __$ArrayPad$[esp+28], eax
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi

; 11   : 	setlocale(LC_ALL, "Russian");

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_07PEAPJBGG@Russian@
  0001c	6a 00		 push	 0
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale

; 12   : 	int c;
; 13   : 	int god, data, month, pust, day, day1, month1, data1, por = 0;
; 14   : 	cout << " ÐÐ²ÐµÐ´Ð¸ÑÐµ Ð´Ð°ÑÑ:  ";

  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0002a	83 c4 08	 add	 esp, 8
  0002d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BB@BCFBHNM@?5?B?b?e?d?h?r?e?5?d?$OA?r?s?3?5?5@
  00032	33 db		 xor	 ebx, ebx
  00034	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 15   : 	cin >> data;

  00039	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  0003f	8d 44 24 1c	 lea	 eax, DWORD PTR _data$[esp+40]
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z

; 16   : 	pust = data;
; 17   : 	god = data % 10000;

  0004a	8b 4c 24 1c	 mov	 ecx, DWORD PTR _data$[esp+40]
  0004e	b8 ad 8b db 68	 mov	 eax, 1759218605		; 68db8badH
  00053	f7 e9		 imul	 ecx
  00055	8b f9		 mov	 edi, ecx

; 18   : 	data = pust;
; 19   : 	month = ((data - god) / 10000) % 100;

  00057	be 64 00 00 00	 mov	 esi, 100		; 00000064H
  0005c	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  0005f	8b c2		 mov	 eax, edx
  00061	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00064	03 c2		 add	 eax, edx
  00066	69 c0 10 27 00
	00		 imul	 eax, eax, 10000
  0006c	2b f8		 sub	 edi, eax
  0006e	b8 ad 8b db 68	 mov	 eax, 1759218605		; 68db8badH
  00073	2b cf		 sub	 ecx, edi
  00075	f7 e9		 imul	 ecx
  00077	c1 fa 0c	 sar	 edx, 12			; 0000000cH
  0007a	8b ca		 mov	 ecx, edx
  0007c	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0007f	03 ca		 add	 ecx, edx
  00081	8b c1		 mov	 eax, ecx
  00083	99		 cdq
  00084	f7 fe		 idiv	 esi
  00086	8b c2		 mov	 eax, edx

; 20   : 	day = ((data - god) / 10000 - month) / 100;

  00088	2b c8		 sub	 ecx, eax
  0008a	89 44 24 10	 mov	 DWORD PTR _month$1$[esp+40], eax
  0008e	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00093	f7 e9		 imul	 ecx

; 66   : 	if (month <= 00 || month >= 13)

  00095	8b 4c 24 10	 mov	 ecx, DWORD PTR _month$1$[esp+40]

; 20   : 	day = ((data - god) / 10000 - month) / 100;

  00099	c1 fa 05	 sar	 edx, 5
  0009c	8b f2		 mov	 esi, edx
  0009e	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  000a1	03 f2		 add	 esi, edx
  000a3	89 74 24 14	 mov	 DWORD PTR _day$1$[esp+40], esi

; 66   : 	if (month <= 00 || month >= 13)

  000a7	85 c9		 test	 ecx, ecx
  000a9	7e 10		 jle	 SHORT $LN16@main
  000ab	33 c0		 xor	 eax, eax
  000ad	81 ff e8 03 00
	00		 cmp	 edi, 1000		; 000003e8H
  000b3	0f 9e c0	 setle	 al
  000b6	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  000b9	7c 05		 jl	 SHORT $LN15@main
$LN16@main:

; 67   : 		a = 1;

  000bb	b8 01 00 00 00	 mov	 eax, 1
$LN15@main:

; 68   : 	if (day <= 00 || day > mes[month - 1])

  000c0	85 f6		 test	 esi, esi
  000c2	0f 8e a0 02 00
	00		 jle	 $LN65@main
  000c8	3b 34 8d fc ff
	ff ff		 cmp	 esi, DWORD PTR ?mes@@3PAHA[ecx*4-4]
  000cf	0f 8f 93 02 00
	00		 jg	 $LN65@main

; 21   : 	if (prov(god, month, day) == 1) {

  000d5	83 f8 01	 cmp	 eax, 1
  000d8	0f 84 8a 02 00
	00		 je	 $LN65@main

; 82   : 	if (god % 4 != 0 || (god % 100 == 0 && god % 400 != 0)) {

  000de	8b c7		 mov	 eax, edi
  000e0	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  000e5	79 07		 jns	 SHORT $LN71@main
  000e7	48		 dec	 eax
  000e8	83 c8 fc	 or	 eax, -4			; fffffffcH
  000eb	83 c0 01	 add	 eax, 1
$LN71@main:
  000ee	75 4b		 jne	 SHORT $LN23@main
  000f0	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000f5	8b cf		 mov	 ecx, edi
  000f7	f7 ef		 imul	 edi
  000f9	c1 fa 05	 sar	 edx, 5
  000fc	8b c2		 mov	 eax, edx
  000fe	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00101	03 c2		 add	 eax, edx
  00103	6b c0 64	 imul	 eax, eax, 100
  00106	2b c8		 sub	 ecx, eax
  00108	75 1d		 jne	 SHORT $LN21@main
  0010a	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0010f	8b cf		 mov	 ecx, edi
  00111	f7 ef		 imul	 edi
  00113	c1 fa 07	 sar	 edx, 7
  00116	8b c2		 mov	 eax, edx
  00118	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0011b	03 c2		 add	 eax, edx
  0011d	69 c0 90 01 00
	00		 imul	 eax, eax, 400
  00123	2b c8		 sub	 ecx, eax
  00125	75 14		 jne	 SHORT $LN23@main
$LN21@main:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00127	6a 0f		 push	 15			; 0000000fH
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DHADGGDH@?B?h?q?n?j?n?q?m?$PL?i?5?c?n?d?5@
  0012e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\instit\lab\ÊÏÎ\Leapyears\Leapyears\Leapyears.cpp

; 87   : 		mes[1]++;

  00133	ff 05 04 00 00
	00		 inc	 DWORD PTR ?mes@@3PAHA+4
  00139	eb 15		 jmp	 SHORT $LL4@main
$LN23@main:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0013b	6a 13		 push	 19			; 00000013H
  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LKGFEEBC@?5?M?e?5?b?h?q?n?j?n?q?m?$PL?i?5?c?n?d?5@
  00142	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00147	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@main:
; File C:\instit\lab\ÊÏÎ\Leapyears\Leapyears\Leapyears.cpp

; 28   : 		cout << endl;

  00150	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00156	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0015b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 29   : 		cout << "ÐÐ²ÐµÐ´Ð¸ÑÐµ" << endl;

  00161	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00166	51		 push	 ecx
  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0016d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_07CLDOPFAM@?B?b?e?d?h?r?e@
  00172	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00177	83 c4 04	 add	 esp, 4
  0017a	8b c8		 mov	 ecx, eax
  0017c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 30   : 		cout << "1-Ð¾Ð¿ÑÐµÐ´ÐµÐ»Ð¸ÑÑ, ÑÐ²Ð»ÑÐµÑÑÑ Ð»Ð¸ Ð²Ð²ÐµÐ´ÐµÐ½Ð½ÑÐ¹ Ð³Ð¾Ð´ ÐÐÐÐ Ð²Ð¸ÑÐ¾ÐºÐ¾ÑÐ½ÑÐ¼" << endl;

  00182	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00187	51		 push	 ecx
  00188	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0018e	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0DI@JBEJIHMI@1?9?n?o?p?e?d?e?k?h?r?$PM?0?5?$PP?b?k?$PP?e?r?q?$PP?5?k?h?5?b?b?e?d?e@
  00193	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00198	83 c4 04	 add	 esp, 4
  0019b	8b c8		 mov	 ecx, eax
  0019d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 31   : 		cout << "2-Ð²ÑÑÐ¸ÑÐ»Ð¸ÑÑ Ð¿Ð¾ÑÑÐ´ÐºÐ¾Ð²ÑÐ¹ Ð½Ð¾Ð¼ÐµÑ Ð²Ð²ÐµÐ´ÐµÐ½Ð½Ð¾Ð³Ð¾ Ð´Ð½Ñ Ð² Ð³Ð¾Ð´Ñ ÐÐÐÐ" << endl;

  001a3	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001a8	51		 push	 ecx
  001a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001af	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0DI@IINHBCLJ@2?9?b?$PL?w?h?q?k?h?r?$PM?5?o?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?b?b@
  001b4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001b9	83 c4 04	 add	 esp, 4
  001bc	8b c8		 mov	 ecx, eax
  001be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 32   : 		cout << "3-Ð²ÑÑÐ¸ÑÐ»Ð¸ÑÑ ÑÐºÐ¾Ð»ÑÐºÐ¾ Ð´Ð½ÐµÐ¹ Ð¾ÑÑÐ°Ð»Ð¾ÑÑ Ð´Ð¾ Ð±Ð»Ð¸Ð¶Ð°Ð¹ÑÐµÐ³Ð¾ Ð´Ð½Ñ Ð²Ð°ÑÐµÐ³o ÑÐ¾Ð¶Ð´ÐµÐ½Ð¸Ñ" << endl;

  001c4	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001c9	51		 push	 ecx
  001ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001d0	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0EE@GLEFEPOP@3?9?b?$PL?w?h?q?k?h?r?$PM?5?q?j?n?k?$PM?j?n?5?d?m?e?i?5?n?q?r?$OA?k?n@
  001d5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001da	83 c4 04	 add	 esp, 4
  001dd	8b c8		 mov	 ecx, eax
  001df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 33   : 		cout << "4-Ð²ÑÑÐ¾Ð´" << endl;

  001e5	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001ea	51		 push	 ecx
  001eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001f1	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_07HJIONDFP@4?9?b?$PL?u?n?d@
  001f6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001fb	83 c4 04	 add	 esp, 4
  001fe	8b c8		 mov	 ecx, eax
  00200	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 34   : 		cin >> c;

  00206	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  0020c	8d 44 24 18	 lea	 eax, DWORD PTR _c$[esp+40]
  00210	50		 push	 eax
  00211	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z

; 35   : 		switch (c)

  00217	8b 44 24 18	 mov	 eax, DWORD PTR _c$[esp+40]
  0021b	83 e8 01	 sub	 eax, 1
  0021e	0f 84 fe 00 00
	00		 je	 $LN8@main
  00224	83 e8 01	 sub	 eax, 1
  00227	0f 84 c5 00 00
	00		 je	 $LN9@main
  0022d	83 e8 01	 sub	 eax, 1
  00230	0f 85 13 01 00
	00		 jne	 $LN2@main

; 44   : 
; 45   : 		case 3:
; 46   : 			cout << "ÐÐ²ÐµÐ´Ð¸ÑÐµ Ð´Ð°ÑÑ Ð¸ Ð¼ÐµÑÑÑ Ð´Ð½Ñ ÑÐ¾Ð¶Ð´ÐµÐ½Ð¸Ñ: ";

  00236	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0023c	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CE@ENCNGIEO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?h?5?l?e?q?$PP?v?5?d?m?$PP?5?p?n?f?d?e?m@
  00241	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 47   : 			cin >> data1;

  00246	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  0024c	8d 44 24 20	 lea	 eax, DWORD PTR _data1$[esp+40]
  00250	50		 push	 eax
  00251	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z

; 48   : 			pust = data1;
; 49   : 			month1 = data1 % 100;

  00257	8b 4c 24 20	 mov	 ecx, DWORD PTR _data1$[esp+40]
  0025b	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00260	f7 e9		 imul	 ecx
  00262	8b f1		 mov	 esi, ecx
  00264	c1 fa 05	 sar	 edx, 5
  00267	8b c2		 mov	 eax, edx
  00269	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0026c	03 c2		 add	 eax, edx
  0026e	6b c0 64	 imul	 eax, eax, 100
  00271	2b f0		 sub	 esi, eax

; 50   : 			day1 = (pust - month1) / 100;

  00273	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00278	2b ce		 sub	 ecx, esi
  0027a	f7 e9		 imul	 ecx
  0027c	c1 fa 05	 sar	 edx, 5
  0027f	8b ca		 mov	 ecx, edx
  00281	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00284	03 ca		 add	 ecx, edx

; 66   : 	if (month <= 00 || month >= 13)

  00286	85 f6		 test	 esi, esi
  00288	7e 10		 jle	 SHORT $LN51@main
  0028a	33 c0		 xor	 eax, eax
  0028c	81 ff e8 03 00
	00		 cmp	 edi, 1000		; 000003e8H
  00292	0f 9e c0	 setle	 al
  00295	83 fe 0d	 cmp	 esi, 13			; 0000000dH
  00298	7c 05		 jl	 SHORT $LN50@main
$LN51@main:

; 67   : 		a = 1;

  0029a	b8 01 00 00 00	 mov	 eax, 1
$LN50@main:

; 68   : 	if (day <= 00 || day > mes[month - 1])

  0029f	85 c9		 test	 ecx, ecx
  002a1	0f 8e c1 00 00
	00		 jle	 $LN65@main
  002a7	3b 0c b5 fc ff
	ff ff		 cmp	 ecx, DWORD PTR ?mes@@3PAHA[esi*4-4]
  002ae	0f 8f b4 00 00
	00		 jg	 $LN65@main

; 51   : 			if (prov(god, month1, day1) == 1) {

  002b4	83 f8 01	 cmp	 eax, 1
  002b7	0f 84 ab 00 00
	00		 je	 $LN65@main

; 52   : 				cout << "\nÐÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð¾ Ð²Ð²ÐµÐ´ÐµÐ½Ð° Ð´Ð°ÑÐ°";
; 53   : 				return 0;
; 54   : 			}
; 55   : 			int a = count(day1, month1, mes); //ÐºÐ°ÐºÐ¾Ð¹ Ð½Ð¾Ð¼ÐµÑ Ð½Ð°ÑÐµÐ³Ð¾ Ð´Ð½Ñ ÑÐ¾Ð¶Ð´ÐµÐ½Ð¸Ñ

  002bd	51		 push	 ecx
  002be	8b d6		 mov	 edx, esi
  002c0	e8 00 00 00 00	 call	 ?count@@YAHHHQAH@Z	; count

; 56   : 			cout << "ÐÐ¾ Ð´Ð½Ñ ÑÐ¾Ð¶Ð´ÐµÐ½Ð¸Ñ Ð¾ÑÑÐ°Ð»Ð¾ÑÑ: " << abs(a - por);

  002c5	2b c3		 sub	 eax, ebx
  002c7	83 c4 04	 add	 esp, 4
  002ca	99		 cdq
  002cb	33 c2		 xor	 eax, edx
  002cd	2b c2		 sub	 eax, edx
  002cf	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BL@KMDPNDAB@?D?n?5?d?m?$PP?5?p?n?f?d?e?m?h?$PP?5?n?q?r?$OA?k?n?q?$PM?3?5@
  002d4	50		 push	 eax
  002d5	51		 push	 ecx
  002d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002dc	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002e1	83 c4 04	 add	 esp, 4
  002e4	8b c8		 mov	 ecx, eax
  002e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  002ec	8b 74 24 14	 mov	 esi, DWORD PTR _day$1$[esp+40]
  002f0	eb 57		 jmp	 SHORT $LN2@main
$LN9@main:

; 36   : 		{
; 37   : 		case 1:
; 38   : 			cout << vis;
; 39   : 			break;
; 40   : 		case 2:
; 41   : 			por = count(day, month, mes);

  002f2	8b 54 24 10	 mov	 edx, DWORD PTR _month$1$[esp+40]
  002f6	51		 push	 ecx
  002f7	8b ce		 mov	 ecx, esi
  002f9	e8 00 00 00 00	 call	 ?count@@YAHHHQAH@Z	; count
  002fe	83 c4 04	 add	 esp, 4
  00301	8b d8		 mov	 ebx, eax

; 42   : 			cout << " Ð¿Ð¾ÑÑÐ´ÐºÐ¾Ð²ÑÐ¹ Ð½Ð¾Ð¼ÐµÑ: " << por;

  00303	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BE@GDJPIMPF@?5?o?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?3?5@
  00308	53		 push	 ebx
  00309	51		 push	 ecx
  0030a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00310	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00315	83 c4 04	 add	 esp, 4
  00318	8b c8		 mov	 ecx, eax
  0031a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z

; 43   : 			break;

  00320	eb 27		 jmp	 SHORT $LN2@main
$LN8@main:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 2319 :         return _BUF_SIZE <= _Myres;

  00322	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 2305 :         const value_type* _Result = _Bx._Buf;

  00329	ba 00 00 00 00	 mov	 edx, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis

; 4983 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  0032e	ff 35 10 00 00
	00		 push	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16

; 2306 :         if (_Large_string_engaged()) {

  00334	0f 43 15 00 00
	00 00		 cmovae	 edx, DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 4983 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  0033b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00341	e8 00 00 00 00	 call	 ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
  00346	83 c4 04	 add	 esp, 4
$LN2@main:
; File C:\instit\lab\ÊÏÎ\Leapyears\Leapyears\Leapyears.cpp

; 59   : 	} while (c != 4);

  00349	83 7c 24 18 04	 cmp	 DWORD PTR _c$[esp+40], 4
  0034e	0f 85 fc fd ff
	ff		 jne	 $LL4@main

; 60   : }

  00354	33 c0		 xor	 eax, eax
  00356	5f		 pop	 edi
  00357	5e		 pop	 esi
  00358	5b		 pop	 ebx
  00359	8b 4c 24 18	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+28]
  0035d	33 cc		 xor	 ecx, esp
  0035f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00364	8b e5		 mov	 esp, ebp
  00366	5d		 pop	 ebp
  00367	c3		 ret	 0
$LN65@main:
  00368	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0036e	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BK@MDIOBJCF@?6?M?e?j?n?p?p?e?j?r?m?n?5?b?b?e?d?e?m?$OA?5?d?$OA?r?$OA@
  00373	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00378	8b 4c 24 24	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+40]
  0037c	33 c0		 xor	 eax, eax
  0037e	5f		 pop	 edi
  0037f	5e		 pop	 esi
  00380	5b		 pop	 ebx
  00381	33 cc		 xor	 ecx, esp
  00383	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00388	8b e5		 mov	 esp, ebp
  0038a	5d		 pop	 ebp
  0038b	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\instit\lab\ÊÏÎ\Leapyears\Leapyears\Leapyears.cpp
;	COMDAT ?prov@@YAHHHH@Z
_TEXT	SEGMENT
_day$ = 8						; size = 4
?prov@@YAHHHH@Z PROC					; prov, COMDAT
; _god$ = ecx
; _month$ = edx

; 62   : int prov(int god, int month, int day) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	int a = 0;
; 64   : 	if (god <= 1000)
; 65   : 		a = 1;
; 66   : 	if (month <= 00 || month >= 13)

  00003	85 d2		 test	 edx, edx
  00005	7e 10		 jle	 SHORT $LN4@prov
  00007	33 c0		 xor	 eax, eax
  00009	81 f9 e8 03 00
	00		 cmp	 ecx, 1000		; 000003e8H
  0000f	0f 9e c0	 setle	 al
  00012	83 fa 0d	 cmp	 edx, 13			; 0000000dH
  00015	7c 05		 jl	 SHORT $LN3@prov
$LN4@prov:

; 67   : 		a = 1;

  00017	b8 01 00 00 00	 mov	 eax, 1
$LN3@prov:

; 68   : 	if (day <= 00 || day > mes[month - 1])

  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _day$[ebp]
  0001f	85 c9		 test	 ecx, ecx
  00021	7e 09		 jle	 SHORT $LN6@prov
  00023	3b 0c 95 fc ff
	ff ff		 cmp	 ecx, DWORD PTR ?mes@@3PAHA[edx*4-4]
  0002a	7e 05		 jle	 SHORT $LN5@prov
$LN6@prov:

; 69   : 		a = 1;
; 70   : 	return (a);

  0002c	b8 01 00 00 00	 mov	 eax, 1
$LN5@prov:

; 71   : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?prov@@YAHHHH@Z ENDP					; prov
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\instit\lab\ÊÏÎ\Leapyears\Leapyears\Leapyears.cpp
;	COMDAT ?count@@YAHHHQAH@Z
_TEXT	SEGMENT
tv391 = -8						; size = 4
_day$1$ = -4						; size = 4
_mes$dead$ = 8						; size = 4
?count@@YAHHHQAH@Z PROC					; count, COMDAT
; _day$ = ecx
; _month$ = edx

; 73   : int count(int day, int month, int mes[]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 75   : 	for (int i = 0; i < month - 1; i++)

  00009	8d 7a ff	 lea	 edi, DWORD PTR [edx-1]
  0000c	89 4d fc	 mov	 DWORD PTR _day$1$[ebp], ecx
  0000f	33 db		 xor	 ebx, ebx
  00011	33 c0		 xor	 eax, eax
  00013	85 ff		 test	 edi, edi
  00015	7e 6b		 jle	 SHORT $LN9@count
  00017	83 ff 08	 cmp	 edi, 8
  0001a	72 66		 jb	 SHORT $LN9@count

; 74   : 	int por = 0;

  0001c	8b cf		 mov	 ecx, edi
  0001e	81 e1 07 00 00
	80		 and	 ecx, -2147483641	; 80000007H
  00024	79 05		 jns	 SHORT $LN21@count
  00026	49		 dec	 ecx
  00027	83 c9 f8	 or	 ecx, -8			; fffffff8H
  0002a	41		 inc	 ecx
$LN21@count:
  0002b	8b d7		 mov	 edx, edi
  0002d	0f 57 d2	 xorps	 xmm2, xmm2
  00030	2b d1		 sub	 edx, ecx
  00032	0f 57 c9	 xorps	 xmm1, xmm1
  00035	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@count:

; 76   : 		por += mes[i];

  00040	0f 10 04 85 00
	00 00 00	 movups	 xmm0, XMMWORD PTR ?mes@@3PAHA[eax*4]
  00048	66 0f fe d0	 paddd	 xmm2, xmm0
  0004c	0f 10 04 85 10
	00 00 00	 movups	 xmm0, XMMWORD PTR ?mes@@3PAHA[eax*4+16]
  00054	83 c0 08	 add	 eax, 8
  00057	66 0f fe c8	 paddd	 xmm1, xmm0
  0005b	3b c2		 cmp	 eax, edx
  0005d	7c e1		 jl	 SHORT $LL4@count

; 74   : 	int por = 0;

  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _day$1$[ebp]
  00062	66 0f fe ca	 paddd	 xmm1, xmm2
  00066	0f 28 c1	 movaps	 xmm0, xmm1
  00069	66 0f 73 d8 08	 psrldq	 xmm0, 8
  0006e	66 0f fe c8	 paddd	 xmm1, xmm0
  00072	0f 10 c1	 movups	 xmm0, xmm1
  00075	66 0f 73 d8 04	 psrldq	 xmm0, 4
  0007a	66 0f fe c8	 paddd	 xmm1, xmm0
  0007e	66 0f 7e cb	 movd	 ebx, xmm1
$LN9@count:

; 75   : 	for (int i = 0; i < month - 1; i++)

  00082	33 d2		 xor	 edx, edx
  00084	33 f6		 xor	 esi, esi
  00086	3b c7		 cmp	 eax, edi
  00088	7d 4a		 jge	 SHORT $LN20@count
  0008a	8b cf		 mov	 ecx, edi
  0008c	2b c8		 sub	 ecx, eax
  0008e	83 f9 02	 cmp	 ecx, 2
  00091	7c 29		 jl	 SHORT $LN19@count
  00093	8d 4f ff	 lea	 ecx, DWORD PTR [edi-1]
  00096	89 4d f8	 mov	 DWORD PTR tv391[ebp], ecx
  00099	0f 1f 80 00 00
	00 00		 npad	 7
$LL16@count:

; 76   : 		por += mes[i];

  000a0	03 14 85 00 00
	00 00		 add	 edx, DWORD PTR ?mes@@3PAHA[eax*4]
  000a7	03 34 85 04 00
	00 00		 add	 esi, DWORD PTR ?mes@@3PAHA[eax*4+4]
  000ae	83 c0 02	 add	 eax, 2
  000b1	8b c8		 mov	 ecx, eax
  000b3	3b 45 f8	 cmp	 eax, DWORD PTR tv391[ebp]
  000b6	7c e8		 jl	 SHORT $LL16@count

; 75   : 	for (int i = 0; i < month - 1; i++)

  000b8	3b cf		 cmp	 ecx, edi
  000ba	7d 07		 jge	 SHORT $LN15@count
$LN19@count:

; 76   : 		por += mes[i];

  000bc	03 1c 85 00 00
	00 00		 add	 ebx, DWORD PTR ?mes@@3PAHA[eax*4]
$LN15@count:
  000c3	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  000c6	03 d8		 add	 ebx, eax

; 77   : 	por += day;

  000c8	8b 45 fc	 mov	 eax, DWORD PTR _day$1$[ebp]
  000cb	5f		 pop	 edi

; 78   : 	return por;
; 79   : }

  000cc	5e		 pop	 esi
  000cd	03 c3		 add	 eax, ebx
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
$LN20@count:
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c3		 ret	 0
?count@@YAHHHQAH@Z ENDP					; count
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\instit\lab\ÊÏÎ\Leapyears\Leapyears\Leapyears.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\instit\lab\ÊÏÎ\Leapyears\Leapyears\Leapyears.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\instit\lab\ÊÏÎ\Leapyears\Leapyears\Leapyears.cpp
;	COMDAT ?visok_god@@YAXH@Z
_TEXT	SEGMENT
?visok_god@@YAXH@Z PROC					; visok_god, COMDAT
; _god$ = ecx

; 81   : void visok_god(int god) {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 82   : 	if (god % 4 != 0 || (god % 100 == 0 && god % 400 != 0)) {

  00003	8b c6		 mov	 eax, esi
  00005	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0000a	79 07		 jns	 SHORT $LN18@visok_god
  0000c	48		 dec	 eax
  0000d	83 c8 fc	 or	 eax, -4			; fffffffcH
  00010	83 c0 01	 add	 eax, 1
$LN18@visok_god:
  00013	75 49		 jne	 SHORT $LN4@visok_god
  00015	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0001a	f7 ee		 imul	 esi
  0001c	c1 fa 05	 sar	 edx, 5
  0001f	8b ca		 mov	 ecx, edx
  00021	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00024	03 ca		 add	 ecx, edx
  00026	8b d6		 mov	 edx, esi
  00028	6b c9 64	 imul	 ecx, ecx, 100
  0002b	2b d1		 sub	 edx, ecx
  0002d	75 1b		 jne	 SHORT $LN2@visok_god
  0002f	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00034	f7 ee		 imul	 esi
  00036	c1 fa 07	 sar	 edx, 7
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx
  00040	69 c0 90 01 00
	00		 imul	 eax, eax, 400
  00046	2b f0		 sub	 esi, eax
  00048	75 14		 jne	 SHORT $LN4@visok_god
$LN2@visok_god:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0004a	6a 0f		 push	 15			; 0000000fH
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DHADGGDH@?B?h?q?n?j?n?q?m?$PL?i?5?c?n?d?5@
  00051	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\instit\lab\ÊÏÎ\Leapyears\Leapyears\Leapyears.cpp

; 87   : 		mes[1]++;

  00056	ff 05 04 00 00
	00		 inc	 DWORD PTR ?mes@@3PAHA+4
  0005c	5e		 pop	 esi

; 89   : }

  0005d	c3		 ret	 0
$LN4@visok_god:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005e	6a 13		 push	 19			; 00000013H
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LKGFEEBC@?5?M?e?5?b?h?q?n?j?n?q?m?$PL?i?5?c?n?d?5@
  00065	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0006a	5e		 pop	 esi
; File C:\instit\lab\ÊÏÎ\Leapyears\Leapyears\Leapyears.cpp

; 89   : }

  0006b	c3		 ret	 0
?visok_god@@YAXH@Z ENDP					; visok_god
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$dead$ = ecx

; 3091 :     _CONSTEXPR20_CONTAINER basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b c2		 mov	 eax, edx

; 3091 :     _CONSTEXPR20_CONTAINER basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00008	56		 push	 esi

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL7@operator:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@operator
  00017	2b c6		 sub	 eax, esi

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00019	50		 push	 eax
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3092 :         return assign(_Ptr);

  00020	5e		 pop	 esi

; 3093 :     }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3002 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3010 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004b	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$dead$ = ecx

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00000	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0

; 2468 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2469 :         _Tidy_init();
; 2470 :     }

  0000a	b8 00 00 00 00	 mov	 eax, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis

; 4596 :         _My_data._Mysize = 0;

  0000f	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00019	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 2468 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2469 :         _Tidy_init();
; 2470 :     }

  00023	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	c2 00 00	 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	c2 00 00	 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 125  :             return _Ok;

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 126  :         }

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  0002b	84 c0		 test	 al, al
  0002d	75 08		 jne	 SHORT $LN2@sentry

; 119  :                 this->_Myostr._Osfx();

  0002f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN2@sentry:

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  0003e	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 80   :         return _Mystrbuf;

  00040	8b 01		 mov	 eax, DWORD PTR [ecx]
  00042	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00045	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 80   :             if (_Rdbuf) {

  00049	85 c9		 test	 ecx, ecx
  0004b	74 05		 je	 SHORT $LN5@sentry

; 81   :                 _Rdbuf->_Unlock();

  0004d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004f	ff 50 08	 call	 DWORD PTR [eax+8]
$LN5@sentry:

; 120  :             }
; 121  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5e		 pop	 esi
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
  00065	cc		 int	 3
  00066	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8b 7d 08	 mov	 edi, DWORD PTR __Ostr$[ebp]

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  0002d	89 3e		 mov	 DWORD PTR [esi], edi

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  0002f	8b 17		 mov	 edx, DWORD PTR [edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 80   :         return _Mystrbuf;

  00031	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00034	8b 4c 38 38	 mov	 ecx, DWORD PTR [eax+edi+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 73   :             if (_Rdbuf) {

  00038	85 c9		 test	 ecx, ecx
  0003a	74 07		 je	 SHORT $LN8@sentry

; 74   :                 _Rdbuf->_Lock();

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	ff 50 04	 call	 DWORD PTR [eax+4]
  00041	8b 17		 mov	 edx, DWORD PTR [edi]
$LN8@sentry:

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 276  :         return _Mystate;

  0004a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 295  :         return rdstate() == ios_base::goodbit;

  0004d	83 7c 38 0c 00	 cmp	 DWORD PTR [eax+edi+12], 0

; 276  :         return _Mystate;

  00052	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 93   :             if (!_Ostr.good()) {

  00055	74 04		 je	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  00057	32 c0		 xor	 al, al

; 95   :                 return;

  00059	eb 22		 jmp	 SHORT $LN23@sentry
$LN2@sentry:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 70   :         return _Tiestr;

  0005b	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  0005e	85 c9		 test	 ecx, ecx
  00060	74 19		 je	 SHORT $LN4@sentry
  00062	3b cf		 cmp	 ecx, edi
  00064	74 15		 je	 SHORT $LN4@sentry

; 101  :                 return;
; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

  0006c	8b 07		 mov	 eax, DWORD PTR [edi]
  0006e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00071	83 7c 38 0c 00	 cmp	 DWORD PTR [eax+edi+12], 0
  00076	0f 94 c0	 sete	 al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  00079	eb 02		 jmp	 SHORT $LN23@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  0007b	b0 01		 mov	 al, 1
$LN23@sentry:

; 106  :         }

  0007d	88 46 04	 mov	 BYTE PTR [esi+4], al
  00080	8b c6		 mov	 eax, esi
  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$dead$ = ecx

; 4655 :         return _Mypair._Get_first();

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis

; 4656 :     }

  00005	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 4651 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 4652 :     }

  00002	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4616 :     _CONSTEXPR20_CONTAINER void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 4617 :         _Mypair._Myval2._Orphan_all();
; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN10@Tidy_deall
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN20@Tidy_deall

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN17@Tidy_deall

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN20@Tidy_deall:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN10@Tidy_deall:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 4633 :             _Mypair._Myval2._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 4638 :     }

  00044	c3		 ret	 0
$LN17@Tidy_deall:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN24@Tidy_deall:
  0004b	cc		 int	 3
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$dead$ = ecx

; 4595 :         auto& _My_data   = _Mypair._Myval2;
; 4596 :         _My_data._Mysize = 0;

  00000	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  0000a	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00014	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0

; 4613 :         }
; 4614 :     }

  0001b	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$dead$ = ecx

; 3940 :         return _Mypair._Myval2._Mysize;

  00000	a1 10 00 00 00	 mov	 eax, DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16

; 3941 :     }

  00005	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$dead$ = ecx

; 3263 :     _CONSTEXPR20_CONTAINER basic_string& assign(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b c2		 mov	 eax, edx

; 3263 :     _CONSTEXPR20_CONTAINER basic_string& assign(_In_z_ const _Elem* const _Ptr) {

  00008	56		 push	 esi

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL5@assign:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL5@assign
  00017	2b c6		 sub	 eax, esi

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00019	50		 push	 eax
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5e		 pop	 esi

; 3265 :     }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -12						; size = 4
__Ptr$GSCopy$1$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$dead$ = ecx

; 3244 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3245 :         // assign [_Ptr, _Ptr + _Count)
; 3246 :         if (_Count <= _Mypair._Myval2._Myres) {

  00010	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  00016	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00019	53		 push	 ebx
  0001a	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0001d	89 45 f8	 mov	 DWORD PTR __Ptr$GSCopy$1$[ebp], eax
  00020	89 4d f4	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00023	56		 push	 esi
  00024	3b d9		 cmp	 ebx, ecx
  00026	77 29		 ja	 SHORT $LN2@assign

; 2319 :         return _BUF_SIZE <= _Myres;

  00028	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3247 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3248 :             _Mypair._Myval2._Mysize = _Count;

  0002b	89 1d 10 00 00
	00		 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, ebx

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx

; 2296 :         value_type* _Result = _Bx._Buf;

  00032	be 00 00 00 00	 mov	 esi, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis

; 2297 :         if (_Large_string_engaged()) {

  00037	0f 43 35 00 00
	00 00		 cmovae	 esi, DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0003e	50		 push	 eax
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 _memmove
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3249 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00048	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 3251 :             return *this;

  0004c	e9 e7 00 00 00	 jmp	 $LN70@assign
$LN2@assign:

; 4508 :         if (_New_size > max_size()) {

  00051	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00057	0f 87 f8 00 00
	00		 ja	 $LN74@assign
  0005d	57		 push	 edi

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0005e	8b fb		 mov	 edi, ebx
  00060	83 cf 0f	 or	 edi, 15			; 0000000fH
  00063	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00069	76 07		 jbe	 SHORT $LN19@assign

; 4490 :             return _Max;

  0006b	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  00070	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4491 :         }
; 4492 : 
; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00072	8b d1		 mov	 edx, ecx
  00074	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00079	d1 ea		 shr	 edx, 1
  0007b	2b c2		 sub	 eax, edx
  0007d	3b c8		 cmp	 ecx, eax
  0007f	76 07		 jbe	 SHORT $LN20@assign

; 4494 :             return _Max;

  00081	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  00086	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4495 :         }
; 4496 : 
; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00088	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0008b	3b f8		 cmp	 edi, eax
  0008d	0f 42 f8	 cmovb	 edi, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00090	33 c9		 xor	 ecx, ecx
  00092	8b c7		 mov	 eax, edi
  00094	83 c0 01	 add	 eax, 1
  00097	0f 92 c1	 setb	 cl
  0009a	f7 d9		 neg	 ecx
  0009c	0b c8		 or	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a4	72 27		 jb	 SHORT $LN27@assign

; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  000a6	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 137  :     if (_Block_size <= _Bytes) {

  000a9	3b c1		 cmp	 eax, ecx
  000ab	0f 86 a9 00 00
	00		 jbe	 $LN75@assign

; 85   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  000ba	85 c0		 test	 eax, eax
  000bc	0f 84 8d 00 00
	00		 je	 $LN63@assign

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000c2	8d 70 23	 lea	 esi, DWORD PTR [eax+35]
  000c5	83 e6 e0	 and	 esi, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000c8	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000cb	eb 13		 jmp	 SHORT $LN26@assign
$LN27@assign:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  000cd	85 c9		 test	 ecx, ecx
  000cf	74 0d		 je	 SHORT $LN28@assign

; 85   :         return ::operator new(_Bytes);

  000d1	51		 push	 ecx
  000d2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d7	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000da	8b f0		 mov	 esi, eax
  000dc	eb 02		 jmp	 SHORT $LN26@assign
$LN28@assign:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000de	33 f6		 xor	 esi, esi
$LN26@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e0	53		 push	 ebx
  000e1	ff 75 f8	 push	 DWORD PTR __Ptr$GSCopy$1$[ebp]

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000e4	89 1d 10 00 00
	00		 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, ebx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ea	56		 push	 esi

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  000eb	89 3d 14 00 00
	00		 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, edi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000f1	e8 00 00 00 00	 call	 _memcpy

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000f6	8b 45 f4	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000fc	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  00100	5f		 pop	 edi
  00101	83 f8 10	 cmp	 eax, 16			; 00000010H
  00104	72 2c		 jb	 SHORT $LN13@assign

; 4527 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00106	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00109	a1 00 00 00 00	 mov	 eax, DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0010e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00114	72 12		 jb	 SHORT $LN66@assign

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00116	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00119	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0011c	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00121	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00124	77 29		 ja	 SHORT $LN63@assign

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00126	8b c2		 mov	 eax, edx
$LN66@assign:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00128	51		 push	 ecx
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0012f	83 c4 08	 add	 esp, 8
$LN13@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 3261 :     }

  00132	89 35 00 00 00
	00		 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, esi
$LN70@assign:
  00138	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013b	b8 00 00 00 00	 mov	 eax, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis
  00140	5e		 pop	 esi
  00141	33 cd		 xor	 ecx, ebp
  00143	5b		 pop	 ebx
  00144	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c2 08 00	 ret	 8
$LN63@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN74@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 4509 :             _Xlen_string(); // result too long

  00155	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN75@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 138  :         _Throw_bad_array_new_length(); // add overflow

  0015a	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN72@assign:
  0015f	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$dead$ = ecx

; 3256 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00004	8b 75 08	 mov	 esi, DWORD PTR __New_ptr$[ebp]

; 3256 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {

  00007	57		 push	 edi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000b	57		 push	 edi
  0000c	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memcpy
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3257 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00018	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi

; 3259 :             },

  0001e	5d		 pop	 ebp
  0001f	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 2348 :         _CONSTEXPR20_CONTAINER ~_Bxty() noexcept {} // user-provided, for fancy pointers

  00000	c2 00 00	 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$dead$ = ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00000	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 2305 :         const value_type* _Result = _Bx._Buf;

  00007	b8 00 00 00 00	 mov	 eax, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis

; 2306 :         if (_Large_string_engaged()) {

  0000c	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 2307 :             _Result = _Unfancy(_Bx._Ptr);
; 2308 :         }
; 2309 : 
; 2310 :         return _Result;
; 2311 :     }

  00013	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 478  :         return static_cast<int_type>(EOF);

  00000	83 c8 ff	 or	 eax, -1

; 479  :     }

  00003	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 469  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  :         return _Left == _Right;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	0f 94 c0	 sete	 al

; 471  :     }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT
; __First$ = ecx

; 397  :         // find length of null-terminated string
; 398  : #if _HAS_CXX17
; 399  : #ifdef __cpp_char8_t
; 400  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 401  : #if _HAS_U8_INTRINSICS
; 402  :             return __builtin_u8strlen(_First);
; 403  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 404  :             return _Primary_char_traits::length(_First);
; 405  : #endif // _HAS_U8_INTRINSICS
; 406  :         } else
; 407  : #endif // __cpp_char8_t
; 408  :         {
; 409  :             return __builtin_strlen(_First);
; 410  :         }
; 411  : #else // _HAS_CXX17
; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00000	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL3@length:
  00003	8a 01		 mov	 al, BYTE PTR [ecx]
  00005	41		 inc	 ecx
  00006	84 c0		 test	 al, al
  00008	75 f9		 jne	 SHORT $LL3@length
  0000a	2b ca		 sub	 ecx, edx
  0000c	8b c1		 mov	 eax, ecx

; 413  : #endif // _HAS_CXX17
; 414  :     }

  0000e	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Char_traits<char,int>::copy, COMDAT
; __First1$ = ecx
; __First2$ = edx

; 49   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 50   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 51   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 52   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 53   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 54   : #ifdef __cpp_lib_is_constant_evaluated
; 55   :         if (_STD is_constant_evaluated()) {
; 56   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap; see LWG-3085
; 57   :             for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {
; 58   :                 _First1[_Idx] = _First2[_Idx];
; 59   :             }
; 60   : 
; 61   :             return _First1;
; 62   :         }
; 63   : #endif // __cpp_lib_is_constant_evaluated
; 64   : 
; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00004	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	52		 push	 edx
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _memcpy
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH

; 66   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 67   : 
; 68   :         return _First1;

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi

; 69   :     }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Char_traits<char,int>::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 80   :         return _Mystrbuf;

  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 80   :             if (_Rdbuf) {

  0002d	85 c9		 test	 ecx, ecx
  0002f	74 05		 je	 SHORT $LN2@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 82   :             }
; 83   :         }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 16		 mov	 DWORD PTR [esi], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 80   :         return _Mystrbuf;

  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00010	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 73   :             if (_Rdbuf) {

  00014	85 c9		 test	 ecx, ecx
  00016	74 05		 je	 SHORT $LN6@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	ff 50 04	 call	 DWORD PTR [eax+4]
$LN6@Sentry_bas:

; 75   :             }
; 76   :         }

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$max@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
??$max@I@std@@YAABIABI0@Z PROC				; std::max<unsigned int>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 43   :     // return larger of _Left and _Right
; 44   :     return _Left < _Right ? _Right : _Left;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	3b 02		 cmp	 eax, DWORD PTR [edx]
  00004	0f 42 ca	 cmovb	 ecx, edx
  00007	8b c1		 mov	 eax, ecx

; 45   : }

  00009	c3		 ret	 0
??$max@I@std@@YAABIABI0@Z ENDP				; std::max<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$dead$ = ecx

; 1382 :         return *this;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis

; 1383 :     }

  00005	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1378 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1379 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$dead$ = ecx

; 3944 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());
; 3945 :         const size_type _Storage_max = // can always store small string
; 3946 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 3947 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 3948 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3949 :         );
; 3950 :     }

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 2314 : #ifdef __cpp_lib_constexpr_string
; 2315 :         if (_STD is_constant_evaluated()) {
; 2316 :             return true;
; 2317 :         }
; 2318 : #endif // __cpp_lib_constexpr_string
; 2319 :         return _BUF_SIZE <= _Myres;

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	0f 93 c0	 setae	 al

; 2320 :     }

  00007	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$dead$ = ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00000	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 2296 :         value_type* _Result = _Bx._Buf;

  00007	b8 00 00 00 00	 mov	 eax, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis

; 2297 :         if (_Large_string_engaged()) {

  0000c	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 2298 :             _Result = _Unfancy(_Bx._Ptr);
; 2299 :         }
; 2300 : 
; 2301 :         return _Result;
; 2302 :     }

  00013	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$dead$ = ecx

; 838  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 29		 jb	 SHORT $LN4@allocate

; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0000d	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 137  :     if (_Block_size <= _Bytes) {

  00010	3b c8		 cmp	 ecx, eax
  00012	76 39		 jbe	 SHORT $LN26@allocate

; 85   :         return ::operator new(_Bytes);

  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0001a	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  0001c	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001f	85 c9		 test	 ecx, ecx
  00021	74 0d		 je	 SHORT $LN13@allocate

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00023	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00026	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00029	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 840  :     }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN13@allocate:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN4@allocate:

; 243  :     if (_Bytes != 0) {

  00036	85 c0		 test	 eax, eax
  00038	74 0d		 je	 SHORT $LN5@allocate

; 85   :         return ::operator new(_Bytes);

  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 840  :     }

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@allocate:

; 247  :     return nullptr;

  00047	33 c0		 xor	 eax, eax

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 840  :     }

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN26@allocate:

; 138  :         _Throw_bad_array_new_length(); // add overflow

  0004d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN24@allocate:
  00052	cc		 int	 3
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$dead$ = ecx

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00009	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000f	72 12		 jb	 SHORT $LN15@deallocate

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00011	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00014	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	77 10		 ja	 SHORT $LN12@deallocate

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00021	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 264  :         ::operator delete(_Ptr, _Bytes);

  00023	51		 push	 ecx
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8

; 836  :     }

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
$LN12@deallocate:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  00037	cc		 int	 3
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z
_TEXT	SEGMENT
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z PROC	; std::_Narrow_char_traits<char,int>::assign, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 450  :         _Left = _Right;

  00000	8a 02		 mov	 al, BYTE PTR [edx]
  00002	88 01		 mov	 BYTE PTR [ecx], al

; 451  :     }

  00004	c3		 ret	 0
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ENDP	; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Char_traits<char,int>::move, COMDAT
; __First1$ = ecx
; __First2$ = edx

; 80   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 81   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 82   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 83   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 84   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 85   : #ifdef __cpp_lib_is_constant_evaluated
; 86   :         if (_STD is_constant_evaluated()) {
; 87   :             // dest: [_First1, _First1 + _Count)
; 88   :             // src: [_First2, _First2 + _Count)
; 89   :             // We need to handle overlapping ranges.
; 90   :             // If _First1 is in the src range, we need a backward loop.
; 91   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 92   : 
; 93   :             if (_First1 == _First2) {
; 94   :                 return _First1; // Self-assignment; either loop would work, but returning immediately is faster.
; 95   :             }
; 96   : 
; 97   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 98   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 99   :             bool _Loop_forward = true;
; 100  : 
; 101  :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 102  :                 if (_First1 == _Src) {
; 103  :                     _Loop_forward = false;
; 104  :                     break;
; 105  :                 }
; 106  :             }
; 107  : 
; 108  :             if (_Loop_forward) {
; 109  :                 for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {
; 110  :                     _First1[_Idx] = _First2[_Idx];
; 111  :                 }
; 112  :             } else {
; 113  :                 for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {
; 114  :                     _First1[_Count - 1 - _Idx] = _First2[_Count - 1 - _Idx];
; 115  :                 }
; 116  :             }
; 117  : 
; 118  :             return _First1;
; 119  :         }
; 120  : #endif // __cpp_lib_is_constant_evaluated
; 121  : 
; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00004	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	52		 push	 edx
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _memmove
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH

; 123  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 124  : 
; 125  :         return _First1;

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi

; 126  :     }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Char_traits<char,int>::move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT
; ___formal$dead$ = ecx

; 728  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00000	83 c8 ff	 or	 eax, -1

; 729  :     }

  00003	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -48						; size = 8
__Pad$ = -48						; size = 8
__State$ = -36						; size = 4
__Val$1$ = -32						; size = 4
$T14 = -32						; size = 1
tv664 = -28						; size = 4
$T8 = -28						; size = 1
__Ostr$ = -24						; size = 4
__Count$2$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT
; __Ostr$ = ecx
; __Val$ = edx

; 734  :     const char* _Val) { // insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b c2		 mov	 eax, edx
  0002d	89 45 e0	 mov	 DWORD PTR __Val$1$[ebp], eax
  00030	8b d9		 mov	 ebx, ecx
  00032	89 5d e8	 mov	 DWORD PTR __Ostr$[ebp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00035	8b c8		 mov	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 738  :     ios_base::iostate _State = ios_base::goodbit;

  00037	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0003e	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL92@operator:
  00041	8a 01		 mov	 al, BYTE PTR [ecx]
  00043	41		 inc	 ecx
  00044	84 c0		 test	 al, al
  00046	75 f9		 jne	 SHORT $LL92@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00048	8b 13		 mov	 edx, DWORD PTR [ebx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0004a	2b ce		 sub	 ecx, esi
  0004c	89 4d ec	 mov	 DWORD PTR __Count$2$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 363  :         return _Wide;

  0004f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00052	03 c3		 add	 eax, ebx
  00054	89 45 e4	 mov	 DWORD PTR tv664[ebp], eax
  00057	8b 78 24	 mov	 edi, DWORD PTR [eax+36]
  0005a	8b 70 20	 mov	 esi, DWORD PTR [eax+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  0005d	85 ff		 test	 edi, edi
  0005f	7c 17		 jl	 SHORT $LN17@operator
  00061	7f 0e		 jg	 SHORT $LN94@operator
  00063	85 f6		 test	 esi, esi
  00065	74 11		 je	 SHORT $LN17@operator
  00067	85 ff		 test	 edi, edi
  00069	7c 0d		 jl	 SHORT $LN17@operator
  0006b	7f 04		 jg	 SHORT $LN94@operator
  0006d	3b f1		 cmp	 esi, ecx
  0006f	76 07		 jbe	 SHORT $LN17@operator
$LN94@operator:
  00071	2b f1		 sub	 esi, ecx
  00073	83 df 00	 sbb	 edi, 0
  00076	eb 0e		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00078	0f 57 c0	 xorps	 xmm0, xmm0
  0007b	66 0f 13 45 d0	 movlpd	 QWORD PTR __Pad$[ebp], xmm0
  00080	8b 7d d4	 mov	 edi, DWORD PTR __Pad$[ebp+4]
  00083	8b 75 d0	 mov	 esi, DWORD PTR __Pad$[ebp]
$LN18@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 80   :         return _Mystrbuf;

  00086	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00089	8b ca		 mov	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  0008b	89 5d d0	 mov	 DWORD PTR __Ok$[ebp], ebx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();
; 73   :             if (_Rdbuf) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0f		 je	 SHORT $LN39@operator

; 74   :                 _Rdbuf->_Lock();

  00092	8b 4d e4	 mov	 ecx, DWORD PTR tv664[ebp]
  00095	8b 00		 mov	 eax, DWORD PTR [eax]
  00097	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
  0009a	ff 50 04	 call	 DWORD PTR [eax+4]
  0009d	8b 13		 mov	 edx, DWORD PTR [ebx]
  0009f	8b ca		 mov	 ecx, edx
$LN39@operator:

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  000a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 276  :         return _Mystate;

  000a8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ab	03 c3		 add	 eax, ebx

; 295  :         return rdstate() == ios_base::goodbit;

  000ad	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 93   :             if (!_Ostr.good()) {

  000b1	74 04		 je	 SHORT $LN33@operator

; 94   :                 _Ok = false;

  000b3	32 c0		 xor	 al, al

; 95   :                 return;

  000b5	eb 26		 jmp	 SHORT $LN107@operator
$LN33@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 70   :         return _Tiestr;

  000b7	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  000ba	85 c0		 test	 eax, eax
  000bc	74 1d		 je	 SHORT $LN35@operator
  000be	3b c3		 cmp	 eax, ebx
  000c0	74 19		 je	 SHORT $LN35@operator

; 101  :                 return;
; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

  000c2	8b c8		 mov	 ecx, eax
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000ca	8b 13		 mov	 edx, DWORD PTR [ebx]
  000cc	8b ca		 mov	 ecx, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 276  :         return _Mystate;

  000ce	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 295  :         return rdstate() == ios_base::goodbit;

  000d1	83 7c 18 0c 00	 cmp	 DWORD PTR [eax+ebx+12], 0
  000d6	0f 94 c0	 sete	 al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000d9	eb 02		 jmp	 SHORT $LN107@operator
$LN35@operator:

; 100  :                 _Ok = true;

  000db	b0 01		 mov	 al, 1
$LN107@operator:

; 741  :     const typename _Myos::sentry _Ok(_Ostr);

  000dd	88 45 d4	 mov	 BYTE PTR __Ok$[ebp+4], al
  000e0	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 742  : 
; 743  :     if (!_Ok) {

  000e7	84 c0		 test	 al, al
  000e9	75 0a		 jne	 SHORT $LN8@operator

; 744  :         _State |= ios_base::badbit;

  000eb	b9 04 00 00 00	 mov	 ecx, 4

; 745  :     } else { // state okay, insert

  000f0	e9 e7 00 00 00	 jmp	 $LN22@operator
$LN8@operator:

; 746  :         _TRY_IO_BEGIN

  000f5	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 326  :         return _Fmtfl;

  000f9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000fc	8b 44 18 14	 mov	 eax, DWORD PTR [eax+ebx+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 747  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00100	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00105	83 f8 40	 cmp	 eax, 64			; 00000040H
  00108	74 3d		 je	 SHORT $LN87@operator
  0010a	66 0f 1f 44 00
	00		 npad	 6
$LL4@operator:

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00110	85 ff		 test	 edi, edi
  00112	7c 31		 jl	 SHORT $LN89@operator
  00114	7f 04		 jg	 SHORT $LN95@operator
  00116	85 f6		 test	 esi, esi
  00118	74 2b		 je	 SHORT $LN89@operator
$LN95@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 101  :         return _Fillch;

  0011a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0011c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0011f	8a 44 19 40	 mov	 al, BYTE PTR [ecx+ebx+64]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 749  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00123	8b 4c 19 38	 mov	 ecx, DWORD PTR [ecx+ebx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 101  :         return _Fillch;

  00127	88 45 e4	 mov	 BYTE PTR $T8[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 749  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0012a	ff 75 e4	 push	 DWORD PTR $T8[ebp]
  0012d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00133	83 f8 ff	 cmp	 eax, -1
  00136	75 05		 jne	 SHORT $LN2@operator

; 750  :                     _State |= ios_base::badbit; // insertion failed, quit

  00138	8d 48 05	 lea	 ecx, DWORD PTR [eax+5]

; 751  :                     break;

  0013b	eb 61		 jmp	 SHORT $LN6@operator
$LN2@operator:

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0013d	83 c6 ff	 add	 esi, -1
  00140	83 d7 ff	 adc	 edi, -1
  00143	eb cb		 jmp	 SHORT $LL4@operator
$LN89@operator:

; 756  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00145	8b 0b		 mov	 ecx, DWORD PTR [ebx]
$LN87@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 80   :         return _Mystrbuf;

  00147	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 756  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0014a	6a 00		 push	 0
  0014c	ff 75 ec	 push	 DWORD PTR __Count$2$[ebp]
  0014f	ff 75 e0	 push	 DWORD PTR __Val$1$[ebp]
  00152	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  00156	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  0015c	3b 45 ec	 cmp	 eax, DWORD PTR __Count$2$[ebp]
  0015f	75 2c		 jne	 SHORT $LN96@operator
  00161	85 d2		 test	 edx, edx
  00163	75 28		 jne	 SHORT $LN96@operator
$LL98@operator:

; 757  :             _State |= ios_base::badbit;
; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {
; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00165	85 ff		 test	 edi, edi
  00167	7c 33		 jl	 SHORT $LN102@operator
  00169	7f 04		 jg	 SHORT $LN97@operator
  0016b	85 f6		 test	 esi, esi
  0016d	74 2d		 je	 SHORT $LN102@operator
$LN97@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 101  :         return _Fillch;

  0016f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00171	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00174	8a 44 19 40	 mov	 al, BYTE PTR [ecx+ebx+64]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 762  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00178	8b 4c 19 38	 mov	 ecx, DWORD PTR [ecx+ebx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 101  :         return _Fillch;

  0017c	88 45 e0	 mov	 BYTE PTR $T14[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 762  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0017f	ff 75 e0	 push	 DWORD PTR $T14[ebp]
  00182	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00188	83 f8 ff	 cmp	 eax, -1
  0018b	75 07		 jne	 SHORT $LN5@operator
$LN96@operator:

; 763  :                     _State |= ios_base::badbit; // insertion failed, quit
; 764  :                     break;
; 765  :                 }
; 766  :             }
; 767  :         }
; 768  : 
; 769  :         _Ostr.width(0);

  0018d	b9 04 00 00 00	 mov	 ecx, 4
  00192	eb 0a		 jmp	 SHORT $LN6@operator
$LN5@operator:

; 757  :             _State |= ios_base::badbit;
; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {
; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00194	83 c6 ff	 add	 esi, -1
  00197	83 d7 ff	 adc	 edi, -1
  0019a	eb c9		 jmp	 SHORT $LL98@operator
$LN102@operator:

; 763  :                     _State |= ios_base::badbit; // insertion failed, quit
; 764  :                     break;
; 765  :                 }
; 766  :             }
; 767  :         }
; 768  : 
; 769  :         _Ostr.width(0);

  0019c	33 c9		 xor	 ecx, ecx
$LN6@operator:
  0019e	8b 03		 mov	 eax, DWORD PTR [ebx]
  001a0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 368  :         _Wide                      = _Newwidth;

  001a3	c7 44 18 20 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+32], 0
  001ab	c7 44 18 24 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+36], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
  001b3	eb 20		 jmp	 SHORT $LN108@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  001b5	8b 55 e8	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001b8	6a 01		 push	 1
  001ba	6a 04		 push	 4
  001bc	8b 02		 mov	 eax, DWORD PTR [edx]
  001be	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001c1	03 ca		 add	 ecx, edx
  001c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  001c9	b8 00 00 00 00	 mov	 eax, $LN23@operator
  001ce	c3		 ret	 0
$LN23@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
  001cf	8b 5d e8	 mov	 ebx, DWORD PTR __Ostr$[ebp]
  001d2	8b 4d dc	 mov	 ecx, DWORD PTR __State$[ebp]
$LN108@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 771  :     }
; 772  : 
; 773  :     _Ostr.setstate(_State);

  001d5	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
$LN22@operator:
  001dc	8b 03		 mov	 eax, DWORD PTR [ebx]
  001de	6a 00		 push	 0
  001e0	51		 push	 ecx
  001e1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001e4	03 cb		 add	 ecx, ebx
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  001ec	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  001f9	8b 75 d0	 mov	 esi, DWORD PTR __Ok$[ebp]
  001fc	84 c0		 test	 al, al
  001fe	75 08		 jne	 SHORT $LN72@operator

; 119  :                 this->_Myostr._Osfx();

  00200	8b ce		 mov	 ecx, esi
  00202	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN72@operator:

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00208	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 80   :         return _Mystrbuf;

  0020c	8b 06		 mov	 eax, DWORD PTR [esi]
  0020e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00211	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 80   :             if (_Rdbuf) {

  00215	85 c9		 test	 ecx, ecx
  00217	74 05		 je	 SHORT $LN99@operator

; 81   :                 _Rdbuf->_Unlock();

  00219	8b 01		 mov	 eax, DWORD PTR [ecx]
  0021b	ff 50 08	 call	 DWORD PTR [eax+8]
$LN99@operator:

; 774  :     return _Ostr;
; 775  : }

  0021e	8b c3		 mov	 eax, ebx
  00220	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00223	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0022a	59		 pop	 ecx
  0022b	5f		 pop	 edi
  0022c	5e		 pop	 esi
  0022d	5b		 pop	 ebx
  0022e	8b e5		 mov	 esp, ebp
  00230	5d		 pop	 ebp
  00231	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00008	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 978  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 979  :     _Ostr.put(_Ostr.widen('\n'));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  00007	6a 0a		 push	 10			; 0000000aH
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000e	03 ce		 add	 ecx, esi
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00016	0f b6 c8	 movzx	 ecx, al
  00019	51		 push	 ecx
  0001a	8b ce		 mov	 ecx, esi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z

; 980  :     _Ostr.flush();

  00022	8b ce		 mov	 ecx, esi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 981  :     return _Ostr;

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi

; 982  : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; __Ostr$ = ecx
; __Str$dead$ = edx

; 4982 :     basic_ostream<_Elem, _Traits>& _Ostr, const basic_string<_Elem, _Traits, _Alloc>& _Str) {

  00000	51		 push	 ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00001	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 2305 :         const value_type* _Result = _Bx._Buf;

  00008	ba 00 00 00 00	 mov	 edx, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis

; 4983 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  0000d	ff 35 10 00 00
	00		 push	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16

; 2306 :         if (_Large_string_engaged()) {

  00013	0f 43 15 00 00
	00 00		 cmovae	 edx, DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 4983 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  0001a	e8 00 00 00 00	 call	 ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
  0001f	83 c4 04	 add	 esp, 4

; 4984 : }

  00022	59		 pop	 ecx
  00023	c3		 ret	 0
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 67   :     // return smaller of _Left and _Right
; 68   :     return _Right < _Left ? _Right : _Left;

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00004	0f 42 ca	 cmovb	 ecx, edx
  00007	8b c1		 mov	 eax, ecx

; 69   : }

  00009	c3		 ret	 0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$dead$ = ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00000	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0000a	b8 00 00 00 00	 mov	 eax, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 2355 :     size_type _Mysize = 0; // current length of string

  0000f	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  00019	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00023	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT
; __Obj$dead$ = ecx

; 308  :     if constexpr (is_array_v<_Ty>) {
; 309  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 310  :     } else {
; 311  :         _Obj.~_Ty();
; 312  :     }
; 313  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__Old$1$ = -8						; size = 4
_<_Args_0>$GSCopy$1$ = -4				; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$dead$ = ecx

; 4505 :     _CONSTEXPR20_CONTAINER basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00009	53		 push	 ebx

; 4506 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4507 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4508 :         if (_New_size > max_size()) {

  0000a	8b 5d 08	 mov	 ebx, DWORD PTR __New_size$[ebp]
  0000d	89 45 fc	 mov	 DWORD PTR _<_Args_0>$GSCopy$1$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00018	0f 87 f4 00 00
	00		 ja	 $LN63@Reallocate

; 4510 :         }
; 4511 : 
; 4512 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0001e	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00024	8b fb		 mov	 edi, ebx
  00026	83 cf 0f	 or	 edi, 15			; 0000000fH

; 4510 :         }
; 4511 : 
; 4512 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00029	89 4d f8	 mov	 DWORD PTR __Old$1$[ebp], ecx

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0002c	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00032	76 07		 jbe	 SHORT $LN9@Reallocate

; 4490 :             return _Max;

  00034	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  00039	eb 1e		 jmp	 SHORT $LN8@Reallocate
$LN9@Reallocate:

; 4491 :         }
; 4492 : 
; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0003b	8b d1		 mov	 edx, ecx
  0003d	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00042	d1 ea		 shr	 edx, 1
  00044	2b c2		 sub	 eax, edx
  00046	3b c8		 cmp	 ecx, eax
  00048	76 07		 jbe	 SHORT $LN10@Reallocate

; 4494 :             return _Max;

  0004a	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  0004f	eb 08		 jmp	 SHORT $LN8@Reallocate
$LN10@Reallocate:

; 4495 :         }
; 4496 : 
; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00051	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00054	3b f8		 cmp	 edi, eax
  00056	0f 42 f8	 cmovb	 edi, eax
$LN8@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00059	33 c9		 xor	 ecx, ecx
  0005b	8b c7		 mov	 eax, edi
  0005d	83 c0 01	 add	 eax, 1
  00060	0f 92 c1	 setb	 cl
  00063	f7 d9		 neg	 ecx
  00065	0b c8		 or	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00067	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0006d	72 27		 jb	 SHORT $LN17@Reallocate

; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0006f	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 137  :     if (_Block_size <= _Bytes) {

  00072	3b c1		 cmp	 eax, ecx
  00074	0f 86 9d 00 00
	00		 jbe	 $LN64@Reallocate

; 85   :         return ::operator new(_Bytes);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00080	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00083	85 c0		 test	 eax, eax
  00085	0f 84 81 00 00
	00		 je	 $LN53@Reallocate

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0008b	8d 70 23	 lea	 esi, DWORD PTR [eax+35]
  0008e	83 e6 e0	 and	 esi, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00091	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00094	eb 13		 jmp	 SHORT $LN16@Reallocate
$LN17@Reallocate:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00096	85 c9		 test	 ecx, ecx
  00098	74 0d		 je	 SHORT $LN18@Reallocate

; 85   :         return ::operator new(_Bytes);

  0009a	51		 push	 ecx
  0009b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a0	83 c4 04	 add	 esp, 4

; 244  :         return _Traits::_Allocate(_Bytes);

  000a3	8b f0		 mov	 esi, eax
  000a5	eb 02		 jmp	 SHORT $LN16@Reallocate
$LN18@Reallocate:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  000a7	33 f6		 xor	 esi, esi
$LN16@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a9	53		 push	 ebx
  000aa	ff 75 fc	 push	 DWORD PTR _<_Args_0>$GSCopy$1$[ebp]

; 4516 : 
; 4517 : #ifdef __cpp_lib_constexpr_string
; 4518 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4519 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4520 :         }
; 4521 : #endif // __cpp_lib_constexpr_string
; 4522 :         _Mypair._Myval2._Orphan_all();
; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000ad	89 1d 10 00 00
	00		 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, ebx

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b3	56		 push	 esi

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  000b4	89 3d 14 00 00
	00		 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, edi

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ba	e8 00 00 00 00	 call	 _memcpy

; 4525 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);
; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000bf	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]

; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000c5	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 4525 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);
; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000c9	83 f9 10	 cmp	 ecx, 16			; 00000010H
  000cc	72 2a		 jb	 SHORT $LN3@Reallocate
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 4527 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000d3	41		 inc	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000d4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000da	72 12		 jb	 SHORT $LN56@Reallocate

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000dc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000df	83 c1 23	 add	 ecx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e2	2b c2		 sub	 eax, edx

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e4	83 c0 fc	 add	 eax, -4			; fffffffcH
  000e7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ea	77 20		 ja	 SHORT $LN53@Reallocate

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ec	8b c2		 mov	 eax, edx
$LN56@Reallocate:

; 264  :         ::operator delete(_Ptr, _Bytes);

  000ee	51		 push	 ecx
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000f5	83 c4 08	 add	 esp, 8
$LN3@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 4533 :         return *this;

  000f8	5f		 pop	 edi
  000f9	89 35 00 00 00
	00		 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, esi
  000ff	b8 00 00 00 00	 mov	 eax, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis
  00104	5e		 pop	 esi
  00105	5b		 pop	 ebx

; 4534 :     }

  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 0c 00	 ret	 12			; 0000000cH
$LN53@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN63@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 4509 :             _Xlen_string(); // result too long

  00112	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN64@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory

; 138  :         _Throw_bad_array_new_length(); // add overflow

  00117	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN61@Reallocate:
  0011c	cc		 int	 3
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT
; __Obj$dead$ = ecx
; _<_Args_0>$ = edx

; 151  :     is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	a3 00 00 00 00	 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, eax

; 152  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 153  :     if (_STD is_constant_evaluated()) {
; 154  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 155  :     } else
; 156  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 157  :     {
; 158  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 159  :     }
; 160  : }

  00007	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT
; __Ptr$ = ecx

; 289  :     return _Ptr;

  00000	8b c1		 mov	 eax, ecx

; 290  : }

  00002	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT
; __Ptr$ = ecx
; __Bytes$ = edx

; 252  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 253  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 254  :     if (_STD is_constant_evaluated()) {
; 255  :         ::operator delete(_Ptr);
; 256  :     } else
; 257  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 258  :     {
; 259  : #if defined(_M_IX86) || defined(_M_X64)
; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00000	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00006	72 14		 jb	 SHORT $LN13@Deallocate

; 155  :     _Bytes += _Non_user_size;

  00008	56		 push	 esi

; 156  : 
; 157  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);
; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00009	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  0000c	83 c2 23	 add	 edx, 35			; 00000023H

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0000f	2b ce		 sub	 ecx, esi

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00011	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00014	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00017	77 0e		 ja	 SHORT $LN10@Deallocate

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00019	8b ce		 mov	 ecx, esi
  0001b	5e		 pop	 esi
$LN13@Deallocate:

; 261  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 262  :         }
; 263  : #endif // defined(_M_IX86) || defined(_M_X64)
; 264  :         ::operator delete(_Ptr, _Bytes);

  0001c	52		 push	 edx
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00023	83 c4 08	 add	 esp, 8

; 265  :     }
; 266  : }

  00026	c3		 ret	 0
$LN10@Deallocate:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN15@Deallocate:
  0002d	cc		 int	 3
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT
; __Count$ = ecx

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;
; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 64   :         if (_Count > _Max_possible) {
; 65   :             _Throw_bad_array_new_length(); // multiply overflow
; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00000	8b c1		 mov	 eax, ecx

; 70   : }

  00002	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT
; __Bytes$ = ecx

; 231  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 232  : #if defined(_M_IX86) || defined(_M_X64)
; 233  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 234  :     if (!_STD is_constant_evaluated())
; 235  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 236  :     {
; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00000	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00006	72 2a		 jb	 SHORT $LN2@Allocate

; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00008	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 137  :     if (_Block_size <= _Bytes) {

  0000b	3b c1		 cmp	 eax, ecx
  0000d	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 85   :         return ::operator new(_Bytes);

  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00019	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  0001b	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001e	85 c9		 test	 ecx, ecx
  00020	74 0a		 je	 SHORT $LN11@Allocate

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00022	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00025	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00028	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 248  : }

  0002b	c3		 ret	 0
$LN11@Allocate:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN2@Allocate:

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00032	85 c9		 test	 ecx, ecx
  00034	74 0a		 je	 SHORT $LN3@Allocate

; 85   :         return ::operator new(_Bytes);

  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003c	83 c4 04	 add	 esp, 4

; 248  : }

  0003f	c3		 ret	 0
$LN3@Allocate:

; 244  :         return _Traits::_Allocate(_Bytes);
; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00040	33 c0		 xor	 eax, eax

; 248  : }

  00042	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$dead$ = ecx

; 4500 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Requested) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Requested$[ebp]

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00006	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0000b	83 ca 0f	 or	 edx, 15			; 0000000fH

; 4500 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Requested) const noexcept {

  0000e	56		 push	 esi

; 4501 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  0000f	8b 35 14 00 00
	00		 mov	 esi, DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00015	3b d0		 cmp	 edx, eax

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00017	77 1d		 ja	 SHORT $LN3@Calculate_

; 4490 :             return _Max;
; 4491 :         }
; 4492 : 
; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00019	8b ce		 mov	 ecx, esi
  0001b	d1 e9		 shr	 ecx, 1
  0001d	2b c1		 sub	 eax, ecx
  0001f	3b f0		 cmp	 esi, eax
  00021	76 0a		 jbe	 SHORT $LN5@Calculate_

; 4501 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00023	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00028	5e		 pop	 esi

; 4502 :     }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN5@Calculate_:

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0002d	03 ce		 add	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0002f	3b d1		 cmp	 edx, ecx
  00031	0f 42 d1	 cmovb	 edx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 4501 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00034	8b c2		 mov	 eax, edx
$LN3@Calculate_:
  00036	5e		 pop	 esi

; 4502 :     }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT
; _this$dead$ = ecx

; 2319 :         return _BUF_SIZE <= _Myres;

  00000	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 2305 :         const value_type* _Result = _Bx._Buf;

  00007	b8 00 00 00 00	 mov	 eax, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis

; 2306 :         if (_Large_string_engaged()) {

  0000c	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 3926 :         return _Mypair._Myval2._Myptr();
; 3927 :     }

  00013	c3		 ret	 0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$dead$ = ecx

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00000	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0

; 2284 :     _CONSTEXPR20_CONTAINER _String_val() noexcept : _Bx() {}

  0000a	b8 00 00 00 00	 mov	 eax, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis

; 2347 : 
; 2348 :         _CONSTEXPR20_CONTAINER ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2349 : 
; 2350 :         value_type _Buf[_BUF_SIZE];
; 2351 :         pointer _Ptr;
; 2352 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2353 :     } _Bx;
; 2354 : 
; 2355 :     size_type _Mysize = 0; // current length of string

  0000f	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  00019	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 0
  00023	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$dead$ = ecx

; 825  :     constexpr allocator() noexcept {}

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis
  00005	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z
_TEXT	SEGMENT
__Max$ = 8						; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; __Requested$ = ecx
; __Old$ = edx

; 4487 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Max$[ebp]
  00008	83 c9 0f	 or	 ecx, 15			; 0000000fH
  0000b	3b cf		 cmp	 ecx, edi

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0000d	77 1a		 ja	 SHORT $LN7@Calculate_

; 4490 :             return _Max;
; 4491 :         }
; 4492 : 
; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0000f	8b f2		 mov	 esi, edx
  00011	8b c7		 mov	 eax, edi
  00013	d1 ee		 shr	 esi, 1
  00015	2b c6		 sub	 eax, esi
  00017	3b d0		 cmp	 edx, eax
  00019	77 0e		 ja	 SHORT $LN7@Calculate_

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0001b	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0001e	3b c8		 cmp	 ecx, eax
  00020	5f		 pop	 edi
  00021	0f 42 c8	 cmovb	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00024	8b c1		 mov	 eax, ecx

; 4498 :     }

  00026	5e		 pop	 esi
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN7@Calculate_:

; 4494 :             return _Max;

  00029	8b c7		 mov	 eax, edi
  0002b	5f		 pop	 edi

; 4498 :     }

  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$dead$ = ecx

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00000	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  0000a	b8 00 00 00 00	 mov	 eax, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis
  0000f	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
_TEXT	SEGMENT
__Ok$ = -40						; size = 8
__Data$1$ = -32						; size = 4
$T13 = -32						; size = 1
tv693 = -28						; size = 4
$T7 = -28						; size = 1
__State$ = -24						; size = 4
__Ostr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Size$ = 8						; size = 4
??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z PROC ; std::_Insert_string<char,std::char_traits<char>,unsigned int>, COMDAT
; __Ostr$ = ecx
; __Data$ = edx

; 501  :     basic_ostream<_Elem, _Traits>& _Ostr, const _Elem* const _Data, const _SizeT _Size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	89 55 e0	 mov	 DWORD PTR __Data$1$[ebp], edx
  0002e	8b d9		 mov	 ebx, ecx
  00030	89 5d ec	 mov	 DWORD PTR __Ostr$[ebp], ebx

; 507  :     if (_Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size) {

  00033	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00035	33 ff		 xor	 edi, edi
  00037	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 363  :         return _Wide;

  0003a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003d	03 d3		 add	 edx, ebx
  0003f	89 55 e4	 mov	 DWORD PTR tv693[ebp], edx
  00042	8b 72 20	 mov	 esi, DWORD PTR [edx+32]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 507  :     if (_Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size) {

  00045	39 7a 24	 cmp	 DWORD PTR [edx+36], edi
  00048	7c 11		 jl	 SHORT $LN10@Insert_str
  0004a	7f 04		 jg	 SHORT $LN93@Insert_str
  0004c	85 f6		 test	 esi, esi
  0004e	74 0b		 je	 SHORT $LN10@Insert_str
$LN93@Insert_str:
  00050	8b 45 08	 mov	 eax, DWORD PTR __Size$[ebp]
  00053	3b f0		 cmp	 esi, eax
  00055	76 04		 jbe	 SHORT $LN10@Insert_str

; 509  :     } else {
; 510  :         _Pad = static_cast<_SizeT>(_Ostr.width()) - _Size;

  00057	2b f0		 sub	 esi, eax
  00059	eb 02		 jmp	 SHORT $LN9@Insert_str
$LN10@Insert_str:

; 508  :         _Pad = 0;

  0005b	33 f6		 xor	 esi, esi
$LN9@Insert_str:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 80   :         return _Mystrbuf;

  0005d	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00060	8b d1		 mov	 edx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00062	89 5d d8	 mov	 DWORD PTR __Ok$[ebp], ebx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();
; 73   :             if (_Rdbuf) {

  00065	85 c0		 test	 eax, eax
  00067	74 0f		 je	 SHORT $LN38@Insert_str

; 74   :                 _Rdbuf->_Lock();

  00069	8b 4d e4	 mov	 ecx, DWORD PTR tv693[ebp]
  0006c	8b 00		 mov	 eax, DWORD PTR [eax]
  0006e	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
  00071	ff 50 04	 call	 DWORD PTR [eax+4]
  00074	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00076	8b d1		 mov	 edx, ecx
$LN38@Insert_str:

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00078	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 276  :         return _Mystate;

  0007f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00082	03 c3		 add	 eax, ebx

; 295  :         return rdstate() == ios_base::goodbit;

  00084	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 93   :             if (!_Ostr.good()) {

  00088	74 04		 je	 SHORT $LN32@Insert_str

; 94   :                 _Ok = false;

  0008a	32 c0		 xor	 al, al

; 95   :                 return;

  0008c	eb 26		 jmp	 SHORT $LN101@Insert_str
$LN32@Insert_str:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 70   :         return _Tiestr;

  0008e	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  00091	85 c0		 test	 eax, eax
  00093	74 1d		 je	 SHORT $LN34@Insert_str
  00095	3b c3		 cmp	 eax, ebx
  00097	74 19		 je	 SHORT $LN34@Insert_str

; 101  :                 return;
; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

  00099	8b c8		 mov	 ecx, eax
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000a1	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000a3	8b d1		 mov	 edx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 276  :         return _Mystate;

  000a5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 295  :         return rdstate() == ios_base::goodbit;

  000a8	83 7c 18 0c 00	 cmp	 DWORD PTR [eax+ebx+12], 0
  000ad	0f 94 c0	 sete	 al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000b0	eb 02		 jmp	 SHORT $LN101@Insert_str
$LN34@Insert_str:

; 100  :                 _Ok = true;

  000b2	b0 01		 mov	 al, 1
$LN101@Insert_str:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 513  :     const typename _Ostr_t::sentry _Ok(_Ostr);

  000b4	88 45 dc	 mov	 BYTE PTR __Ok$[ebp+4], al
  000b7	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 514  : 
; 515  :     if (!_Ok) {

  000be	84 c0		 test	 al, al
  000c0	75 0a		 jne	 SHORT $LN11@Insert_str

; 516  :         _State |= _Ostr_t::badbit;

  000c2	bf 04 00 00 00	 mov	 edi, 4

; 517  :     } else { // state okay, insert characters

  000c7	e9 d1 00 00 00	 jmp	 $LN23@Insert_str
$LN11@Insert_str:

; 518  :         _TRY_IO_BEGIN

  000cc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 326  :         return _Fmtfl;

  000d0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000d3	8b 44 18 14	 mov	 eax, DWORD PTR [eax+ebx+20]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 519  :         if ((_Ostr.flags() & _Ostr_t::adjustfield) != _Ostr_t::left) {

  000d7	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000dc	83 f8 40	 cmp	 eax, 64			; 00000040H
  000df	74 31		 je	 SHORT $LN88@Insert_str
$LL4@Insert_str:

; 520  :             for (; 0 < _Pad; --_Pad) { // pad on left

  000e1	85 f6		 test	 esi, esi
  000e3	74 2b		 je	 SHORT $LN90@Insert_str
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 101  :         return _Fillch;

  000e5	8b 03		 mov	 eax, DWORD PTR [ebx]
  000e7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ea	8a 44 19 40	 mov	 al, BYTE PTR [ecx+ebx+64]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 521  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  000ee	8b 4c 19 38	 mov	 ecx, DWORD PTR [ecx+ebx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 101  :         return _Fillch;

  000f2	88 45 e4	 mov	 BYTE PTR $T7[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 521  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  000f5	ff 75 e4	 push	 DWORD PTR $T7[ebp]
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  000fe	83 f8 ff	 cmp	 eax, -1
  00101	75 0a		 jne	 SHORT $LN2@Insert_str

; 522  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  00103	bf 04 00 00 00	 mov	 edi, 4
  00108	89 7d e8	 mov	 DWORD PTR __State$[ebp], edi

; 523  :                     break;

  0010b	eb 23		 jmp	 SHORT $LL95@Insert_str
$LN2@Insert_str:

; 520  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0010d	4e		 dec	 esi
  0010e	eb d1		 jmp	 SHORT $LL4@Insert_str
$LN90@Insert_str:

; 529  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  00110	8b 13		 mov	 edx, DWORD PTR [ebx]
$LN88@Insert_str:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 80   :         return _Mystrbuf;

  00112	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 529  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  00115	6a 00		 push	 0
  00117	ff 75 08	 push	 DWORD PTR __Size$[ebp]
  0011a	ff 75 e0	 push	 DWORD PTR __Data$1$[ebp]
  0011d	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  00127	3b 45 08	 cmp	 eax, DWORD PTR __Size$[ebp]
  0012a	75 2e		 jne	 SHORT $LN94@Insert_str
  0012c	85 d2		 test	 edx, edx
  0012e	75 2a		 jne	 SHORT $LN94@Insert_str
$LL95@Insert_str:

; 531  :         } else {
; 532  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00130	85 f6		 test	 esi, esi
  00132	74 2b		 je	 SHORT $LN6@Insert_str
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 101  :         return _Fillch;

  00134	8b 03		 mov	 eax, DWORD PTR [ebx]
  00136	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00139	8a 44 19 40	 mov	 al, BYTE PTR [ecx+ebx+64]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 533  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0013d	8b 4c 19 38	 mov	 ecx, DWORD PTR [ecx+ebx+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 101  :         return _Fillch;

  00141	88 45 e0	 mov	 BYTE PTR $T13[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 533  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00144	ff 75 e0	 push	 DWORD PTR $T13[ebp]
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0014d	83 f8 ff	 cmp	 eax, -1
  00150	75 05		 jne	 SHORT $LN5@Insert_str

; 534  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  00152	83 cf 04	 or	 edi, 4

; 535  :                     break;

  00155	eb 08		 jmp	 SHORT $LN6@Insert_str
$LN5@Insert_str:

; 531  :         } else {
; 532  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00157	4e		 dec	 esi
  00158	eb d6		 jmp	 SHORT $LL95@Insert_str
$LN94@Insert_str:

; 530  :             _State |= _Ostr_t::badbit;

  0015a	bf 04 00 00 00	 mov	 edi, 4
$LN6@Insert_str:

; 536  :                 }
; 537  :             }
; 538  :         }
; 539  : 
; 540  :         _Ostr.width(0);

  0015f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00161	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase

; 368  :         _Wide                      = _Newwidth;

  00164	c7 44 18 20 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+32], 0
  0016c	c7 44 18 24 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+36], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
  00174	eb 20		 jmp	 SHORT $LN102@Insert_str
__catch$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$0:

; 541  :         _CATCH_IO_(_Ostr_t, _Ostr)

  00176	8b 55 ec	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00179	6a 01		 push	 1
  0017b	6a 04		 push	 4
  0017d	8b 02		 mov	 eax, DWORD PTR [edx]
  0017f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00182	03 ca		 add	 ecx, edx
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  0018a	b8 00 00 00 00	 mov	 eax, $LN24@Insert_str
  0018f	c3		 ret	 0
$LN24@Insert_str:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
  00190	8b 5d ec	 mov	 ebx, DWORD PTR __Ostr$[ebp]
  00193	8b 7d e8	 mov	 edi, DWORD PTR __State$[ebp]
$LN102@Insert_str:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 542  :     }
; 543  : 
; 544  :     _Ostr.setstate(_State);

  00196	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1
$LN23@Insert_str:
  0019d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0019f	6a 00		 push	 0
  001a1	57		 push	 edi
  001a2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001a5	03 cb		 add	 ecx, ebx
  001a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  001ad	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  001b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  001ba	8b 75 d8	 mov	 esi, DWORD PTR __Ok$[ebp]
  001bd	84 c0		 test	 al, al
  001bf	75 08		 jne	 SHORT $LN71@Insert_str

; 119  :                 this->_Myostr._Osfx();

  001c1	8b ce		 mov	 ecx, esi
  001c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN71@Insert_str:

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  001c9	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+12], 5
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios

; 80   :         return _Mystrbuf;

  001cd	8b 06		 mov	 eax, DWORD PTR [esi]
  001cf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001d2	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream

; 80   :             if (_Rdbuf) {

  001d6	85 c9		 test	 ecx, ecx
  001d8	74 05		 je	 SHORT $LN96@Insert_str

; 81   :                 _Rdbuf->_Unlock();

  001da	8b 01		 mov	 eax, DWORD PTR [ecx]
  001dc	ff 50 08	 call	 DWORD PTR [eax+8]
$LN96@Insert_str:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring

; 546  : }

  001df	8b c3		 mov	 eax, ebx
  001e1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001e4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001eb	59		 pop	 ecx
  001ec	5f		 pop	 edi
  001ed	5e		 pop	 esi
  001ee	5b		 pop	 ebx
  001ef	8b e5		 mov	 esp, ebp
  001f1	5d		 pop	 ebp
  001f2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$3:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z$2:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_string@DU?$char_traits@D@std@@I@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@QBDI@Z ENDP ; std::_Insert_string<char,std::char_traits<char>,unsigned int>
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT
; __Val$dead$ = ecx

; 275  :     return __builtin_addressof(_Val);

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?vis@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; vis

; 276  : }

  00005	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z
_TEXT	SEGMENT
??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z PROC		; std::_Voidify_iter<char * *>, COMDAT
; __It$ = ecx

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00000	8b c1		 mov	 eax, ecx

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

  00002	c3		 ret	 0
??$_Voidify_iter@PAPAD@std@@YAPAXPAPAD@Z ENDP		; std::_Voidify_iter<char * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT
; __Arg$ = ecx

; 1444 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1445 : }

  00002	c3		 ret	 0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT
; __Bytes$ = ecx

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00000	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 137  :     if (_Block_size <= _Bytes) {

  00003	3b c1		 cmp	 eax, ecx
  00005	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 85   :         return ::operator new(_Bytes);

  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 138  :         _Throw_bad_array_new_length(); // add overflow
; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00011	8b c8		 mov	 ecx, eax

; 85   :         return ::operator new(_Bytes);

  00013	83 c4 04	 add	 esp, 4

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00016	85 c9		 test	 ecx, ecx
  00018	74 0a		 je	 SHORT $LN7@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0001a	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0001d	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00020	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 148  : #endif // _DEBUG
; 149  :     return _Ptr;
; 150  : }

  00023	c3		 ret	 0
$LN7@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00024	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
END
